pipeline {
  agent any
// –£–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —Å–±–æ—Ä–æ–∫ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å
  options {
    buildDiscarder(logRotator(numToKeepStr: '50'))
  }
// –£–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é Gradle –Ω–∞–ø—Ä–∏–º–µ—Ä Gradle 6.4.5
  tools {
    gradle 'Gradle'
  }
// –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è
  triggers {
    cron('0 */4 * * *')
  }

  stages {
    stage('Checkout') {
      steps {
       git branch: 'master',
        credentialsId: '–£–∫–∞–∑–∞—Ç—å –∫—Ä–µ–¥—É',
        url: '–£–∫–∞–∑–∞—Ç—å URL GIT'
      }
    }

// –£–∫–∞–∑–∞—Ç—å TEG —Å build.gradle
    stage('Build') {
      steps {
        sh 'gradle clean test_env'
      }
    }
  }

  post {
    success {
      ansiColor('xterm') {
        echo "–¢–µ—Å—Ç—ã —Å—Ä–µ–¥–µ TEST –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
      }
    }

    failure {
      ansiColor('vga') {
        echo "–¢–µ—Å—Ç—ã –Ω–∞ —Å—Ä–µ–¥–µ TEST –ø—Ä–æ—à–ª–∏ –Ω–µ —É—Å–ø–µ—à–Ω–æ"
      }

      script {
        allure([
          includeProperties: false,
          jdk              : '',
          properties       : [],
          reportBuildPolicy: 'ALWAYS',
          results          : [[path: 'build/allure-results']]
        ])
      }
// –£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
      sh  ("""
        curl -s -X POST –í –¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º API -d text="üõë–¢–µ—Å—Ç—ã(TEST)\nüìç‚ÜíPipeline: ${JOB_BASE_NAME}\nüìç‚Üí–°—Ä–µ–¥–∞: –£–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥—É\nüìç‚Üí–°c—ã–ª–∫–∞ –Ω–∞ allure: ${BUILD_URL}allure/"
      """)
    }
  }
}
